// <auto-generated />
using System;
using MargoFetcher.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MargoFetcher.Infrastructure.Migrations
{
    [DbContext(typeof(MargoDbContext))]
    partial class MargoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MargoFetcher.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FetchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastFetchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("St")
                        .HasColumnType("int");

                    b.Property<string>("Stat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tpl")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId", "Hid");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("MargoFetcher.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstFetchDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastFetchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Nick")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "CharId", "Server");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("MargoFetcher.Domain.Entities.PlayerLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FetchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayersLevels");
                });

            modelBuilder.Entity("MargoFetcher.Domain.Entities.PlayerNick", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FetchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nick")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayersNick");
                });

            modelBuilder.Entity("MargoFetcher.Domain.Entities.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Servers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ServerName = "classic"
                        },
                        new
                        {
                            Id = 2,
                            ServerName = "aether"
                        },
                        new
                        {
                            Id = 3,
                            ServerName = "aldous"
                        },
                        new
                        {
                            Id = 4,
                            ServerName = "berufs"
                        },
                        new
                        {
                            Id = 5,
                            ServerName = "brutal"
                        },
                        new
                        {
                            Id = 6,
                            ServerName = "fobos"
                        },
                        new
                        {
                            Id = 7,
                            ServerName = "gefion"
                        },
                        new
                        {
                            Id = 8,
                            ServerName = "hutena"
                        },
                        new
                        {
                            Id = 9,
                            ServerName = "jaruna"
                        },
                        new
                        {
                            Id = 10,
                            ServerName = "katahha"
                        },
                        new
                        {
                            Id = 11,
                            ServerName = "lelwani"
                        },
                        new
                        {
                            Id = 12,
                            ServerName = "majuna"
                        },
                        new
                        {
                            Id = 13,
                            ServerName = "nomada"
                        },
                        new
                        {
                            Id = 14,
                            ServerName = "perkun"
                        },
                        new
                        {
                            Id = 15,
                            ServerName = "tarhuna"
                        },
                        new
                        {
                            Id = 16,
                            ServerName = "telawel"
                        },
                        new
                        {
                            Id = 17,
                            ServerName = "tempest"
                        },
                        new
                        {
                            Id = 18,
                            ServerName = "zemyna"
                        },
                        new
                        {
                            Id = 19,
                            ServerName = "zorza"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
